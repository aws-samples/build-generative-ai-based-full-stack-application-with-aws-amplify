AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Agent with Action Group and Lambda Function for Course Search'

Parameters:
  AgentName:
    Type: String
    Default: 'CourseSearchAgent'
    Description: 'Name of the Bedrock Agent'
  
  ModelId:
    Type: String
    Default: 'us.anthropic.claude-3-7-sonnet-20250219-v1:0'
    Description: 'Foundation model ID for the agent'
  
  DynamoDBTableName:
    Type: String
    Default: 'Class'
    Description: 'DynamoDB table name containing course data'

Resources:
  # IAM Role for Bedrock Agent
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: !Sub '${AgentName}-BedrockAgentPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${ModelId}'

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AgentName}-DynamoDBReadPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'

  # Lambda Function for Course Search
  CourseSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AgentName}-CourseSearch'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          from boto3.dynamodb.conditions import Attr, Contains
          from decimal import Decimal

          def lambda_handler(event, context):
              """
              Bedrock Agent Action Group을 위한 Lambda 함수
              사용자 질문에 기반하여 관련 영상을 검색합니다.
              """
              
              print(f"📥 받은 이벤트: {json.dumps(event, default=str)}")
              
              try:
                  # Bedrock Agent 이벤트 구조 파싱
                  api_path = event.get('apiPath', '')
                  http_method = event.get('httpMethod', '')
                  request_body = event.get('requestBody', {})
                  
                  print(f"🔍 API Path: {api_path}, Method: {http_method}")
                  print(f"📦 Request Body: {request_body}")
                  
                  # DynamoDB 클라이언트 초기화
                  dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
                  
                  if api_path == '/search_classes' and http_method == 'POST':
                      # requestBody에서 content 추출
                      content = request_body.get('content', {})
                      app_json = content.get('application/json', {})
                      properties = app_json.get('properties', [])
                      
                      # properties에서 query 파라미터 추출
                      query = ''
                      for prop in properties:
                          if prop.get('name') == 'query':
                              query = prop.get('value', '')
                              break
                      
                      print(f"🔎 추출된 query: {query}")
                      result = search_classes(dynamodb, query)
                      function_name = 'search_classes'
                  else:
                      result = {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Unknown endpoint'})
                      }
                      function_name = 'unknown'
                  
                  # Bedrock Agent 응답 형식 (AWS 공식 스펙)
                  response = {
                      'messageVersion': '1.0',
                      'response': {
                          'actionGroup': event.get('actionGroup', 'ClassSearchActions'),
                          'apiPath': api_path,
                          'httpMethod': http_method,
                          'httpStatusCode': result.get('statusCode', 200),
                          'responseBody': {
                              'application/json': {
                                  'body': result.get('body', '{}')
                              }
                          }
                      }
                  }
                  
                  print(f"📤 반환 응답: {json.dumps(response, ensure_ascii=False, default=str)}")
                  return response
                  
              except Exception as e:
                  print(f"❌ 오류 발생: {str(e)}")
                  import traceback
                  print(f"📋 스택 트레이스: {traceback.format_exc()}")
                  
                  error_body = {'error': str(e)}
                  error_response = {
                      'messageVersion': '1.0',
                      'response': {
                          'actionGroup': event.get('actionGroup', ''),
                          'apiPath': event.get('apiPath', ''),
                          'httpMethod': event.get('httpMethod', ''),
                          'httpStatusCode': 500,
                          'responseBody': {
                              'application/json': {
                                  'body': error_body
                              }
                          }
                      }
                  }
                  
                  print(f"📤 에러 응답: {json.dumps(error_response, ensure_ascii=False, default=str)}")
                  return error_response

          def search_classes(dynamodb, query):
              """DynamoDB에서 영상 검색 - description 기반 간단 검색"""
              
              print(f"🔍 검색 쿼리: {query}")
              
              # 검색어를 개별 키워드로 분리
              search_terms = [term.strip().lower() for term in query.split() if term.strip()] if query else []
              
              print(f"🔎 검색어: {search_terms}")
              
              table_name = os.environ['DYNAMODB_TABLE_NAME']
              
              try:
                  table = dynamodb.Table(table_name)
                  
                  # 검색어가 없으면 빈 결과 반환
                  if not search_terms:
                      print("⚠️ 검색어 없음 - 빈 결과 반환")
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'courses_found': 0,
                              'courses': [],
                              'message': '검색어를 입력해주세요.'
                          }, ensure_ascii=False)
                      }
                  
                  # 활성 영상만 조회
                  base_filter = Attr('class_flag').ne(10) & (Attr('class_flag').eq(0) | Attr('class_flag').not_exists())
                  
                  # name과 description 필드에서 대소문자 구분 없이 검색
                  search_conditions = []
                  for term in search_terms:
                      term_lower = term.lower()
                      term_upper = term.upper()
                      term_title = term.title()
                      
                      search_conditions.append(
                          Contains(Attr('name'), term) |
                          Contains(Attr('name'), term_lower) |
                          Contains(Attr('name'), term_upper) |
                          Contains(Attr('name'), term_title) |
                          Contains(Attr('description'), term) |
                          Contains(Attr('description'), term_lower) |
                          Contains(Attr('description'), term_upper) |
                          Contains(Attr('description'), term_title)
                      )
                  
                  # OR 조건으로 결합
                  search_filter = search_conditions[0]
                  for condition in search_conditions[1:]:
                      search_filter = search_filter | condition
                  
                  final_filter = base_filter & search_filter
                  
                  # 스캔 실행
                  response = table.scan(
                      FilterExpression=final_filter,
                      Limit=20
                  )
                  
                  print(f"📊 스캔 결과: {len(response.get('Items', []))}개 항목")
                  
                  # 결과 포맷팅 - thumbnail과 URL만 포함
                  classes = []
                  for item in response.get('Items', []):
                      class_info = {
                          'title': str(item.get('name', '')),
                          'description': str(item.get('description', ''))[:150] + '...' if len(str(item.get('description', ''))) > 150 else str(item.get('description', '')),
                          'url': str(item.get('url', '')),
                          'thumbnail': str(item.get('image', '')),
                          'author': str(item.get('author', '')),
                          'difficulty': str(item.get('difficulty', 'intermediate'))
                      }
                      classes.append(class_info)
                  
                  # 상위 5개만 반환
                  top_classes = classes[:5]
                  
                  message = f"'{' '.join(search_terms)}' 관련 강의 {len(top_classes)}개를 찾았습니다." if top_classes else f"'{' '.join(search_terms)}' 관련 강의를 찾지 못했습니다."
                  
                  result_data = {
                      'courses_found': len(top_classes),
                      'courses': top_classes,
                      'message': message,
                      'traces': [
                          {'type': 'preprocessing', 'content': f"🔍 '{' '.join(search_terms)}' 검색 시작", 'timestamp': ''},
                          {'type': 'function_call', 'content': f'⚡ DynamoDB에서 {len(classes)}개 항목 발견', 'timestamp': ''},
                          {'type': 'observation', 'content': f'✅ 상위 {len(top_classes)}개 강의 선택 완료', 'timestamp': ''}
                      ]
                  }
                  
                  print(f"✅ 검색 완료: {len(top_classes)}개 영상 발견")
                  print(f"📊 결과 데이터: {json.dumps(result_data, ensure_ascii=False)}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(result_data, ensure_ascii=False)
                  }
                  
              except Exception as e:
                  print(f"❌ 테이블 접근 오류: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': f'Database error: {str(e)}'})
                  }


  # Lambda Permission for Bedrock Agent
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CourseSearchFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

  # Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Ref AgentName
      Description: 'AI Agent for searching and recommending AWS courses'
      FoundationModel: !Ref ModelId
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Instruction: |
        당신은 AWS 학습 영상 검색 전문가입니다.

        You are an AWS course search expert.
        You should reply with the language of the written query.

        User question → call search_classes → recommend max 3 courses

        Response format (JSON only):
        JSON FORMAT (copy exact values):
        {
          "title": "Title",
          "sections": [
            {
              "type": "course",
              "title": "<copy from courses[].title>",
              "difficulty": "<copy from courses[].difficulty>",
              "instructor": "<copy from courses[].author>",
              "description": "<copy from courses[].description>",
              "link": "<copy from courses[].url>",
              "thumbnail": "<copy from courses[].thumbnail>",
              "reason": "<your 1 sentence>"
            }
          ]
        }

        - No header or text sections
        - Max 3 courses only
        - Each field limited to 1 sentence
        - Complete within 20 seconds
      ActionGroups:
        - ActionGroupName: 'CourseSearchActionGroup'
          Description: 'Search for courses in DynamoDB'
          ActionGroupExecutor:
            Lambda: !GetAtt CourseSearchFunction.Arn
          ApiSchema:
            Payload: |
              {
                "openapi": "3.0.0",
                "info": {
                  "title": "Course Search API",
                  "version": "1.0.0",
                  "description": "API for searching courses in DynamoDB"
                },
                "paths": {
                  "/search_classes": {
                    "post": {
                      "summary": "Search for classes/courses",
                      "description": "Search for classes or courses based on query parameters",
                      "operationId": "search_classes",
                      "requestBody": {
                        "required": true,
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "query": {
                                  "type": "string",
                                  "description": "Search query for finding relevant courses"
                                }
                              },
                              "required": ["query"]
                            }
                          }
                        }
                      },
                      "responses": {
                        "200": {
                          "description": "Successful response",
                          "content": {
                            "application/json": {
                              "schema": {
                                "type": "object",
                                "properties": {
                                  "courses_found": {
                                    "type": "integer"
                                  },
                                  "courses": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "title": {"type": "string"},
                                        "description": {"type": "string"},
                                        "url": {"type": "string"},
                                        "author": {"type": "string"},
                                        "difficulty": {"type": "string"}
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

  # Bedrock Agent Alias
  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref BedrockAgent
      AgentAliasName: 'DRAFT'
      Description: 'Draft alias for the course search agent'

Outputs:
  AgentId:
    Description: 'Bedrock Agent ID'
    Value: !Ref BedrockAgent
    Export:
      Name: !Sub '${AWS::StackName}-AgentId'
  
  AgentAliasId:
    Description: 'Bedrock Agent Alias ID'
    Value: !GetAtt BedrockAgentAlias.AgentAliasId
    Export:
      Name: !Sub '${AWS::StackName}-AgentAliasId'
  
  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt CourseSearchFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
  
  AgentArn:
    Description: 'Bedrock Agent ARN'
    Value: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/${BedrockAgent}'
    Export:
      Name: !Sub '${AWS::StackName}-AgentArn'
